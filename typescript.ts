import type { _SERVICE, DeviceData, UserNumber } from "./output";
import { HttpAgent, HttpAgentOptions, Identity } from "@dfinity/agent";
import { BinaryBlob, blobFromHex } from "@dfinity/candid";
import { CandidBlob } from "./utils";

const canisterId = "rrkah-cai";

// This could be autogenerated in a separate file, implementing the service
export type ServiceOptions = {
  agentOptions?: HttpAgentOptions;
};
export class IdentityAgent implements _SERVICE {
  _agent: HttpAgent;
  _identity: Identity | Promise<Identity>;
  constructor(options?: ServiceOptions) {
    this._agent = new HttpAgent(options?.agentOptions);
    this._identity = options?.agentOptions.identity;
  }

  lookup = async (userNumber: UserNumber): Promise<DeviceData[]> => {
    // implementation details
    const blob = blobFromHex(userNumber.toString());
    this._agent.query(canisterId, { methodName: "lookup", arg: blob });
    const foo: DeviceData = {
      pubkey: new CandidBlob(),
      alias: "",
      purpose: "authentication",
      keyType: "cross_platform",
    };
    return [foo];
  };
}
