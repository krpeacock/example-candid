import type { Principal } from "@dfinity/principal";
import { Nat64, CandidBlob, CallResponseDefault } from "./utils";

type UserNumber = Nat64;
type PublicKey = CandidBlob;
type CredentialId = CandidBlob;
type DeviceKey = PublicKey;
type UserKey = PublicKey;
type FrontendHostName = string;
type Timestamp = Nat64;

type HeaderField = Map<string, string>;

type HttpRequest = {
  method: string;
  url: string;
  headers: HeaderField[];
  body: CandidBlob;
};

type HttpResponse = {
  status_code: number;
  headers: HeaderField[];
  body: CandidBlob;
  streaming_strategy?: StreamingStrategy;
};

type StreamingCallbackHttpResponse = {
  body: CandidBlob;
  token?: Token;
};

type Token = unknown;

type Callback = {
  callback: (Token) => StreamingCallbackHttpResponse;
};

type StreamingStrategy = Callback;

type Purpose = "recovery" | "authentication";

type KeyType = "unknown" | "platform" | "cross_platform" | "seed_phrase";

type DeviceData = {
  pubkey: DeviceKey;
  alias: string;
  credential_id?: CredentialId;
  purpose: Purpose;
  key_type: KeyType;
};

type RegisterResponse =
  | { registered: { user_number: UserNumber } }
  | "canister_full";

type Delegation = {
  pubkey: PublicKey;
  expiration: Timestamp;
  targets?: Principal[];
};

type SignedDelegation = {
  delegation: Delegation;
  signature: CandidBlob;
};

type GetDelegationResponse = SignedDelegation | "no_such_delegation";

type InternetIdentityStats = {
  users_registered: Nat64;
  assigned_user_number_range: [Nat64, Nat64];
};

type InternetIdentityInit = {
  assigned_user_number_range: [Nat64, Nat64];
};

type ProofOfWork = {
  timestamp: Timestamp;
  nonce: Nat64;
};

type service = {
  init_salt: () => Promise<CallResponseDefault>;
  register: (DeviceData, ProofOfWork) => Promise<RegisterResponse>;
  add: (UserNumber, DeviceData) => Promise<CallResponseDefault>;
  remove: (UserNumber, DeviceKey) => Promise<CallResponseDefault>;
  lookup: (UserNumber) => Promise<DeviceData[]>;
  stats: () => Promise<InternetIdentityStats>;
  prepare_delegation: (
    UserNumber,
    FrontendHostName,
    SessionKey,
    maxTimeToLive?: Nat64
  ) => Promise<{ userKey: UserKey; timestamp: Timestamp }>;
  get_delegation: (
    UserNumber,
    FrontendHostName,
    SessionKey,
    maxTimeToLive?: Nat64
  ) => Promise<{ userKey: UserKey; timestamp: Timestamp }>;
  http_request: (request: HttpRequest) => Promise<HttpResponse>;
};

// This could be autogenerated in a separate file, implementing the service
export class Identity implements service {
  lookup = async (UserNumber): Promise<DeviceData[]> => {
    // implementation details
    const foo: DeviceData = {
      pubkey: new CandidBlob(),
      alias: "",
      purpose: "authentication",
      key_type: "cross_platform",
    };
    return [foo];
  };
}
